// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  email             String?
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  trainings     Training[]
  settings      UserSettings @relation(fields: [settingsId], references: [id])
  settingsId    String
}

model UserSettings {
  id        String            @id @default(cuid())
  exercises CatalogExercise[]
  User      User[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Training {
  id             String             @id @default(cuid())
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  startedAt      DateTime
  status         TrainingStatus     @default(STARTED)
  endedAt        DateTime?
  exercises      TrainingExercise[]
  bodyParameters BodyParameter[]
  User           User?              @relation(fields: [userId], references: [id])
  userId         String?
  comment        String?
}

model BodyParameter {
  id                  String                   @id @default(cuid())
  name                String
  unit                CatalogBodyParameterUnit @relation(fields: [bodyParameterUnitId], references: [id])
  Training            Training?                @relation(fields: [trainingId], references: [id])
  trainingId          String?
  bodyParameterUnitId String
}

model TrainingExercise {
  id         String          @id @default(cuid())
  Training   Training?       @relation(fields: [trainingId], references: [id])
  trainingId String?
  sets       TrainingSet[]
  exercise   CatalogExercise @relation(fields: [exerciseId], references: [id])
  rest       Int?
  exerciseId String
}

model TrainingSet {
  id                 String            @id @default(cuid())
  setId              String?
  reps               Int?
  duration           Int?
  weight             Int?
  intensity          Intensity?
  rest               Int?
  TrainingExercise   TrainingExercise? @relation(fields: [trainingExerciseId], references: [id])
  trainingExerciseId String?
  CatalogExercise    CatalogExercise?  @relation(fields: [catalogExerciseId], references: [id])
  catalogExerciseId  String?
}

// catalogs

model CatalogBodyParameterUnit {
  id            String          @id @default(cuid())
  name          String
  BodyParameter BodyParameter[]
}

model CatalogExercise {
  id               String             @id @default(cuid())
  name             String
  level            ExerciseLevel
  force            ExerciseForce?
  mechanic         ExerciseMechanic?
  equipment        ExerciseEquipment?
  primaryMuscles   ExerciseMuscle[]
  secondaryMuscles ExerciseMuscle[]
  instructions     String[]
  category         ExerciseCategory
  TrainingSet      TrainingSet[]
  UserSettings     UserSettings?      @relation(fields: [userSettingsId], references: [id])
  userSettingsId   String?
  TrainingExercise TrainingExercise[]
}

// enums

enum Intensity {
  LOW
  MEDIUM
  HIGH
}

enum ExerciseCategory {
  STRENGTH
  STRETCHING
  PLYOMETRICS
  STRONGMAN
  POWERLIFTING
  CARDIO
  OLYMPIC_WEIGHTLIFTING
  CROSSFIT
  WEIGHTED_BODYWEIGHT
  ASSISTED_BODYWEIGHT
}

enum ExerciseMechanic {
  COMPOUND
  ISOLATION
}

enum ExerciseLevel {
  BEGINNER
  INTERMEDIATE
  EXPERT
}

enum ExerciseEquipment {
  BODY
  MACHINE
  KETTLEBELLS
  DUMBBELL
  CABLE
  BARBELL
  BANDS
  MEDICINE_BALL
  EXERCISE_BALL
  E_Z_CURL_BAR
  FOAM_ROLL
  OTHER
}

enum ExerciseMuscle {
  ABDOMINALS
  HAMSTRINGS
  CALVES
  SHOULDERS
  ADDUCTORS
  GLUTES
  QUADRICEPS
  BICEPS
  FOREARMS
  ABDUCTORS
  TRICEPS
  CHEST
  LOWER_BACK
  TRAPS
  MIDDLE_BACK
  LATS
  NECK
}

enum ExerciseForce {
  PULL
  PUSH
  STATIC
}

enum TrainingStatus {
  STARTED
  FINISHED
}
