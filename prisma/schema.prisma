// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  email             String?
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Training {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  at           DateTime
  sets         Set[]
  userParams   UserParams @relation(fields: [userParamsId], references: [id])
  userParamsId String
}

model UserParams {
  id             String          @id @default(cuid())
  weight         Int
  heartRate      Int
  circumferences Circumference[]
  Training       Training[]
}

model Circumference {
  id           String      @id @default(cuid())
  type         String
  value        String
  UserParams   UserParams? @relation(fields: [userParamsId], references: [id])
  userParamsId String?
}

model Set {
  id          String       @id @default(cuid())
  Training    Training?    @relation(fields: [trainingId], references: [id])
  trainingId  String?
  repetitions Repetition[]
  exercise    Exercise     @relation(fields: [exerciseId], references: [id])
  exerciseId  String
  rest        Int
}

model Repetition {
  id        String  @id @default(cuid())
  Set       Set?    @relation(fields: [setId], references: [id])
  setId     String?
  weight    Int
  count     Int
  duration  Int
  intensity Int
  rest      Int
}

model Exercise {
  id   String @id @default(cuid())
  name String
  type String // temporal or countable
  Set  Set[]
}
